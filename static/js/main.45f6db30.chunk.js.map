{"version":3,"sources":["reportWebVitals.js","valuevisualiser.jsx","mergesrt.jsx","quicksort.jsx","Toolbar.jsx","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","VisualiserGround","props","state","bars","createBars","bind","Promise","maxNum","theme","randomBars","maxRandHeight","i","length","randInt","Math","floor","random","push","class","id","height","backgroundColour","this","setState","map","bar","style","backgroundColor","React","Component","mergesort","array","leftIndex","rightIndex","animations","middle","merge","n1","n2","left","Array","right","s1","s2","merged","mergeAnimation","copy","swap","temp","quickSortLR","pivot","partitionLR","pivVal","low","high","l","r","quickSort","pivInd","partition","wait","ms","resolve","setTimeout","Toolbar","counter","sorting","sorted","speed","visgrnd","createRef","createBtn","mergeSort","quickSortLL","animateArray","validate","themeSwap","document","getElementById","classList","toggle","body","current","forEach","index","console","log","quickSortAnimationLR","quickSortAnimationLL","delay","obj","a","aux","contains","e","target","value","onClick","type","min","max","onChange","handleInput","handleArrayInput","ref","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.45f6db30.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\n\r\nclass VisualiserGround extends React.Component {\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = { bars: [] };\r\n        this.createBars = this.createBars.bind(this);\r\n    }\r\n\r\n    componentDidMount()\r\n    {\r\n        new Promise(() => this.createBars(100));\r\n    }\r\n\r\n    createBars(maxNum, theme)\r\n    {\r\n        let randomBars = [];\r\n        let maxRandHeight = 0;\r\n        if(maxNum <= 100) { maxRandHeight = maxNum; } else { maxRandHeight = 100; }\r\n        for(let i = 0; randomBars.length < maxNum; ++i)\r\n        {\r\n            let randInt = Math.floor(Math.random() * maxRandHeight+1);\r\n            if(theme === \"dark\")\r\n            {\r\n                randomBars.push({class: \"bar\", id: i, height: randInt*0.7, backgroundColour:\"#c7c4b4\"});\r\n            } else { randomBars.push({class: \"bar\", id: i, height: randInt*0.7, backgroundColour:\"red\"}); }\r\n            //randomBars.push({class: \"bar\", id: i, height: randInt*0.7, backgroundColour:\"red\"}); //randInt*8.8 //, backgroundColour:\"red\"\r\n        }\r\n\r\n        this.setState({ bars: randomBars });\r\n    }\r\n\r\n    //, backgroundColor: bar.backgroundColour\r\n    render()\r\n    {\r\n        return (\r\n            <div id=\"vis\" class=\"visual\">\r\n                {this.state.bars.map(bar => <div id={bar.id} class={bar.class} style={{height: bar.height+\"vh\", backgroundColor: bar.backgroundColour}}></div>)}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default VisualiserGround;","const mergeAnimation = (array) => {\r\n    const animations = [];\r\n    const copy = [...array];\r\n    mergesort(copy, 0, copy.length-1, animations);\r\n    return animations;\r\n}\r\n\r\nconst mergesort = (array, leftIndex, rightIndex, animations) =>\r\n{\r\n    if(rightIndex > leftIndex)\r\n    {\r\n        let middle = leftIndex + Math.floor((rightIndex - leftIndex)/2);\r\n        mergesort(array, leftIndex, middle, animations);\r\n        mergesort(array, middle+1, rightIndex, animations);\r\n        merge(array, leftIndex, middle, rightIndex, animations);\r\n    }\r\n}\r\n\r\nconst merge = (array, leftIndex, middle, rightIndex, animations) =>\r\n{\r\n    let n1 = middle - leftIndex + 1;\r\n    let n2 = rightIndex - middle;\r\n\r\n    //subarrays\r\n    let left = new Array(n1);\r\n    let right = new Array(n2);\r\n\r\n    for(let i = 0; i < n1; ++i) { left[i] = array[leftIndex + i]; }\r\n    for(let i = 0; i < n2; ++i) { right[i] = array[middle + 1 + i]; }\r\n\r\n    //initial index of first, second and merged subarrays\r\n    let s1 = 0; let s2 = 0; let merged = leftIndex;\r\n    \r\n\r\n    while(s1 < n1 && s2 < n2)\r\n    {\r\n        if(left[s1].height <= right[s2].height) { \r\n            animations.push([merged, left[s1]]);\r\n            array[merged] = left[s1];  \r\n            ++s1;  }\r\n        else { \r\n            animations.push([merged, right[s2]]);\r\n            array[merged] = right[s2]; \r\n            ++s2;  }\r\n        ++merged;\r\n    }\r\n\r\n    while(s1 < n1)\r\n    {\r\n        animations.push([merged, left[s1]]);\r\n        array[merged] = left[s1];\r\n        ++s1;\r\n        ++merged;\r\n    }\r\n\r\n    while(s2 < n2)\r\n    {\r\n        animations.push([merged, right[s2]]);\r\n        array[merged] = right[s2];\r\n        ++s2;\r\n        ++merged;\r\n    }\r\n}\r\n\r\nexport default mergeAnimation;","export const quickSortAnimationLR = (array) => {\r\n    const animations = [];\r\n    const copy = [...array];\r\n    quickSortLR(copy, 0, array.length-1, animations); //LR\r\n    return animations;\r\n}\r\n\r\nexport const quickSortAnimationLL = (array) => {\r\n    const animations = [];\r\n    const copy = [...array];\r\n    quickSort(copy, 0, array.length-1, animations); //LL\r\n    return animations;\r\n}\r\n\r\nconst swap = (array, left, right, animations) => {\r\n    const temp = array[left];\r\n    animations.push([left, array[right]]);\r\n    array[left] = array[right];\r\n    animations.push([right, temp]);\r\n    array[right] = temp;\r\n}\r\n\r\nconst quickSortLR = (array, leftIndex, rightIndex, animations) => {\r\n    let pivot = partitionLR(array, leftIndex, rightIndex, animations);\r\n    let pivVal = array[pivot].height;\r\n    let low = leftIndex;\r\n    let high = rightIndex;\r\n\r\n    while(low <= high)\r\n    {\r\n        while(array[low].height < pivVal)\r\n        {\r\n            low++;\r\n        }\r\n\r\n        while(array[high].height > pivVal)\r\n        {\r\n            high--;\r\n        }\r\n\r\n        if(low <= high)\r\n        {\r\n            swap(array, low, high, animations);\r\n            if(pivot === low) { pivot = high; }\r\n            else if(pivot === high) { pivot = low; }\r\n\r\n            low++;\r\n            high--;\r\n        }\r\n    }\r\n\r\n    if(leftIndex < high) { quickSortLR(array, leftIndex, high, animations); }\r\n    if(low < rightIndex) { quickSortLR(array, low, rightIndex, animations); }\r\n}\r\n\r\nconst partitionLR = (array, leftIndex, rightIndex, animations) => {\r\n    let pivot = Math.floor((leftIndex+rightIndex)/2);\r\n    let l = leftIndex;\r\n    let r = rightIndex;\r\n    while(l <= r)\r\n    {\r\n        while(array[l].height < array[pivot].height)\r\n        {\r\n            l++;\r\n        }\r\n        while(array[r].height > array[pivot].height)\r\n        {\r\n            r--;\r\n        }\r\n\r\n        if(l <= r)\r\n        {\r\n            swap(array, l, r, animations);\r\n            l++;\r\n            r--;\r\n        }\r\n    }\r\n    return l;\r\n}\r\n\r\nconst partition = (array, leftIndex, rightIndex, animations) => {\r\n    const pivVal = array[rightIndex].height;\r\n    let pivInd = leftIndex;\r\n    for(let i = leftIndex; i < rightIndex; i++)\r\n    {\r\n        if(array[i].height < pivVal)\r\n        {\r\n            swap(array, i, pivInd, animations);\r\n            pivInd++;\r\n        }\r\n    }\r\n\r\n    swap(array, pivInd, rightIndex, animations);\r\n    return pivInd;\r\n}\r\n\r\nconst quickSort = (array, leftIndex, rightIndex, animations) => {\r\n\r\n    if(leftIndex >= rightIndex) { return; }\r\n    let pivot = partition(array, leftIndex, rightIndex, animations);\r\n    quickSort(array, leftIndex, pivot-1, animations);\r\n    quickSort(array, pivot+1, rightIndex, animations);\r\n}","import React from 'react';\r\nimport './toolbar.scss';\r\nimport VisualiserGround from './valuevisualiser.jsx';\r\nimport mergeAnimation from './mergesrt.jsx';\r\nimport {quickSortAnimationLR, quickSortAnimationLL} from './quicksort.jsx';\r\n\r\nconst wait = ms => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\nclass Toolbar extends React.Component {\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = { counter: 0, sorting: false, sorted: false, theme: \"light\", speed: 57, length:100 };\r\n        this.visgrnd = React.createRef();\r\n        this.createBtn = this.createBtn.bind(this);\r\n        this.mergeSort = this.mergeSort.bind(this);\r\n        this.quickSortLR = this.quickSortLR.bind(this);\r\n        this.quickSortLL = this.quickSortLL.bind(this);\r\n        this.animateArray = this.animateArray.bind(this);\r\n        this.validate = this.validate.bind(this);\r\n        this.themeSwap = this.themeSwap.bind(this);\r\n    }\r\n\r\n    themeSwap()\r\n    {\r\n        this.setState({\r\n            theme: this.state.theme === \"light\" ? \"dark\" : \"light\"\r\n        });\r\n        document.getElementById(\"tb\").classList.toggle(\"dark\");\r\n        document.body.classList.toggle(\"dark\");\r\n        // let bars = document.getElementById(\"vis\").getElementsByClassName(\"bar\");\r\n        // for(let b of bars)\r\n        // {\r\n        //     b.classList.toggle(\"dark\");\r\n        // }\r\n        this.visgrnd.current.state.bars.forEach(index => {\r\n            if(this.state.theme === \"light\")\r\n            {\r\n                index.backgroundColour = \"#c7c4b4\";\r\n            } else { index.backgroundColour = \"red\"; }\r\n            \r\n            console.log(\"tweoo\");\r\n            //index.style.backgroundColor = \"#c7c4b4\";\r\n        });\r\n        this.setState({bars: this.visgrnd.current.state.bars});\r\n    }\r\n\r\n    quickSortLR()\r\n    {\r\n        if(this.state.sorting || this.state.sorted) { return; }\r\n        let animations = quickSortAnimationLR(this.visgrnd.current.state.bars);\r\n        this.animateArray(animations);\r\n    }\r\n\r\n    quickSortLL()\r\n    {\r\n        if(this.state.sorting || this.state.sorted) { return; }\r\n        let animations = quickSortAnimationLL(this.visgrnd.current.state.bars);\r\n        this.animateArray(animations);\r\n    }\r\n\r\n    validate(array, delay)\r\n    {\r\n        array.forEach((obj, index) => {\r\n            setTimeout(() => {\r\n                obj.backgroundColour = \"green\";\r\n            }, delay * index);\r\n            this.setState({\r\n                bars: array\r\n            }); \r\n        });\r\n    }\r\n\r\n    async animateArray(animations)\r\n    {\r\n        document.getElementById(\"vs\");\r\n        this.setState({\r\n            sorting: true\r\n        });\r\n        let aux = this.visgrnd.current.state.bars;\r\n\r\n        //const sortspeed = ((10000/50)/(aux.length/10))*2.5;\r\n        //const colourspeed = 50;\r\n\r\n        for(let i = 0; i < animations.length; i++)\r\n        {\r\n            if(animations[i][0] !== animations[i][1])\r\n            {\r\n                // let t =aux[animations[i][0]];\r\n                // console.log(aux.findIndex(x => x.id === t.id));\r\n                // //let b = document.getElementById(aux[animations[i][0]].id);\r\n                // let b = document.getElementById(aux.findIndex(x => x.id === aux[animations[i][0]].id));\r\n                setTimeout(() => {\r\n                    //b.classList.toggle(\"access\");\r\n                    //b.style.backgroundColor = \"blue\";\r\n                    aux[animations[i][0]].backgroundColour = \"blue\";\r\n                }, this.state.speed);\r\n\r\n                setTimeout(() => {\r\n                    //b.style.backgroundColor = \"red\";\r\n                    //b.classList.toggle(\"access\");\r\n                    //aux[animations[i][0]].backgroundColour = \"red\";\r\n\r\n                    if(this.state.theme === \"dark\")\r\n                    {\r\n                        aux[animations[i][0]].backgroundColour = \"#c7c4b4\";\r\n                    } else { aux[animations[i][0]].backgroundColour = \"red\"; }\r\n                }, this.state.speed * 2);\r\n                aux[animations[i][0]] = animations[i][1];\r\n            }\r\n\r\n            this.setState({\r\n                bars: aux\r\n            });\r\n            await wait(this.state.speed);\r\n        }\r\n\r\n        // animations.forEach(([swap1, swap2], index) => {\r\n        //     setTimeout(() => {\r\n        //         if(swap1 !== swap2) { \r\n        //             //aux[swap1].backgroundColour = \"blue\";\r\n        //             setTimeout(() => {\r\n        //                 aux[swap1].backgroundColour = \"blue\";\r\n        //             }, speed);\r\n                    \r\n        //             setTimeout(() => {\r\n        //                 aux[swap1].backgroundColour = \"red\";\r\n        //             }, speed*2.5);\r\n\r\n        //             aux[swap1] = swap2;\r\n        //         }\r\n        //         // setTimeout(() => {\r\n        //         //     aux[swap1].backgroundColour = \"red\";\r\n        //         // }, speed*2.5);\r\n        //         this.setState({\r\n        //             bars: aux\r\n        //         }); \r\n        //     }, index * speed);\r\n        // });\r\n        // if(Math.pow(aux.length, 2) < 40000) { await wait(40000 - (speed * aux.length)); }\r\n        // else { await wait(40000 + (speed * aux.length) - (aux.length * aux.length/100)); }\r\n\r\n        this.setState({\r\n            bars: aux\r\n        });\r\n\r\n        for(let i = 0; i < aux.length; i++)\r\n        {\r\n            let b = document.getElementById(aux[i].id);\r\n            b.classList.toggle(\"complete\");\r\n            this.setState({\r\n                bars: aux\r\n            });\r\n            await wait(2);\r\n        }\r\n\r\n        this.setState({\r\n            sorting: false,\r\n            sorted: true\r\n        });\r\n    }\r\n\r\n\r\n    mergeSort()\r\n    {\r\n        if(this.state.sorting || this.state.sorted) { return; }\r\n        let animations = mergeAnimation(this.visgrnd.current.state.bars);\r\n        this.animateArray(animations);\r\n    }\r\n\r\n    createBtn()\r\n    {\r\n        if(this.state.sorting) { return; }\r\n        if(document.getElementById(this.visgrnd.current.state.bars[0].id).classList.contains(\"complete\"))\r\n        {\r\n            for(let i = 0; i < this.visgrnd.current.state.bars.length; i++)\r\n            {\r\n                let b = document.getElementById(this.visgrnd.current.state.bars[i].id);\r\n                b.classList.toggle(\"complete\");\r\n                this.setState({\r\n                    bars: this.visgrnd.current.state.bars\r\n                });\r\n            }\r\n        }\r\n        this.visgrnd.current.createBars(this.state.length, this.state.theme);\r\n        this.setState({\r\n            sorted: false\r\n        });\r\n    }\r\n\r\n    handleInput(e)\r\n    {\r\n        this.setState({ \r\n            speed: e.target.value\r\n        });\r\n    }\r\n\r\n    handleArrayInput(e)\r\n    {\r\n        if(this.state.sorting) { return; }\r\n        if(document.getElementById(this.visgrnd.current.state.bars[0].id).classList.contains(\"complete\"))\r\n        {\r\n            for(let i = 0; i < this.visgrnd.current.state.bars.length; i++)\r\n            {\r\n                let b = document.getElementById(this.visgrnd.current.state.bars[i].id);\r\n                b.classList.toggle(\"complete\");\r\n                this.setState({\r\n                    bars: this.visgrnd.current.state.bars\r\n                });\r\n            }\r\n        }\r\n        this.visgrnd.current.createBars(e.target.value, this.state.theme);\r\n        this.setState({\r\n            sorted: false,\r\n            length: e.target.value\r\n        });\r\n    }\r\n    \r\n    render()\r\n    {\r\n        return (\r\n            <>\r\n                <div id=\"tb\" class=\"toolbar\">\r\n                    <div id=\"createValues\" onClick={this.createBtn}>Create Values</div>\r\n                    <div id=\"mergeSort\" onClick={this.mergeSort}>Merge Sort</div>\r\n                    <div id=\"quickSortLR\" onClick={this.quickSortLR}>Quick Sort (LR)</div>\r\n                    <div id=\"quickSortLL\" onClick={this.quickSortLL}>Quick Sort (LL)</div>\r\n                    <div id=\"speedContainer\">\r\n                        Speed:\r\n                        <input id=\"valRange\" class={`slider${this.state.theme}`} type=\"range\" min=\"15\" max=\"100\" value={this.state.speed} onChange={(e) => {this.handleInput(e)}}/>\r\n                    </div>\r\n                    <div id=\"sizeContainer\">\r\n                        Array Size:\r\n                        <input id=\"arraySize\" class={`slider${this.state.theme}`} type=\"range\" min=\"30\" max=\"200\" value={this.state.length} onChange={(e) => {this.handleArrayInput(e)}}/>\r\n                    </div>\r\n                    <div id=\"theme\" onClick={this.themeSwap}>Theme</div>\r\n                </div>\r\n                <VisualiserGround ref={this.visgrnd} />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Toolbar;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport Toolbar from './Toolbar.jsx';\n\n\n//<Toolbar />\n//<App />\n//<VisualiserGround />\nReactDOM.render(\n  <React.StrictMode>\n    <Toolbar />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}