{"version":3,"sources":["reportWebVitals.js","valuevisualiser.jsx","mergesrt.jsx","quicksort.jsx","Toolbar.jsx","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","VisualiserGround","props","state","bars","createBars","bind","Promise","maxNum","randomBars","maxRandHeight","i","length","randInt","Math","floor","random","push","class","id","height","backgroundColour","this","setState","map","bar","style","backgroundColor","React","Component","mergesort","array","leftIndex","rightIndex","animations","middle","merge","n1","n2","left","Array","right","s1","s2","merged","mergeAnimation","copy","swap","temp","quickSortLR","pivot","partitionLR","pivVal","low","high","l","r","quickSort","pivInd","partition","wait","ms","resolve","setTimeout","Toolbar","counter","sorting","sorted","visgrnd","createRef","createBtn","mergeSort","quickSortLL","animateArray","validate","quickSortAnimationLR","current","quickSortAnimationLL","delay","forEach","obj","index","a","aux","sortspeed","colourspeed","onClick","ref","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eda1d3d4.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\n\r\nclass VisualiserGround extends React.Component {\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = { bars: [] };\r\n        this.createBars = this.createBars.bind(this);\r\n    }\r\n\r\n    componentDidMount()\r\n    {\r\n        new Promise(() => this.createBars(100));\r\n    }\r\n\r\n    createBars(maxNum)\r\n    {\r\n        let randomBars = [];\r\n        let maxRandHeight = 0;\r\n        if(maxNum <= 100) { maxRandHeight = maxNum; } else { maxRandHeight = 100; }\r\n        for(let i = 0; randomBars.length < maxNum; ++i)\r\n        {\r\n            let randInt = Math.floor(Math.random() * maxRandHeight+1);\r\n            randomBars.push({class: \"bar\", id: i, height: randInt*0.7, backgroundColour:\"red\"}); //randInt*8.8\r\n        }\r\n\r\n        this.setState({ bars: randomBars });\r\n    }\r\n\r\n    render()\r\n    {\r\n        return (\r\n            <div class=\"visual\">\r\n                {this.state.bars.map(bar => <div id={bar.id} class={bar.class} style={{height: bar.height+\"vh\", backgroundColor: bar.backgroundColour}}></div>)}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default VisualiserGround;","const mergeAnimation = (array) => {\r\n    const animations = [];\r\n    const copy = [...array];\r\n    mergesort(copy, 0, copy.length-1, animations);\r\n    return animations;\r\n}\r\n\r\nconst mergesort = (array, leftIndex, rightIndex, animations) =>\r\n{\r\n    if(rightIndex > leftIndex)\r\n    {\r\n        let middle = leftIndex + Math.floor((rightIndex - leftIndex)/2);\r\n        mergesort(array, leftIndex, middle, animations);\r\n        mergesort(array, middle+1, rightIndex, animations);\r\n        merge(array, leftIndex, middle, rightIndex, animations);\r\n    }\r\n}\r\n\r\nconst merge = (array, leftIndex, middle, rightIndex, animations) =>\r\n{\r\n    let n1 = middle - leftIndex + 1;\r\n    let n2 = rightIndex - middle;\r\n\r\n    //subarrays\r\n    let left = new Array(n1);\r\n    let right = new Array(n2);\r\n\r\n    for(let i = 0; i < n1; ++i) { left[i] = array[leftIndex + i]; }\r\n    for(let i = 0; i < n2; ++i) { right[i] = array[middle + 1 + i]; }\r\n\r\n    //initial index of first, second and merged subarrays\r\n    let s1 = 0; let s2 = 0; let merged = leftIndex;\r\n    \r\n\r\n    while(s1 < n1 && s2 < n2)\r\n    {\r\n        if(left[s1].height <= right[s2].height) { \r\n            animations.push([merged, left[s1]]);\r\n            array[merged] = left[s1];  \r\n            ++s1;  }\r\n        else { \r\n            animations.push([merged, right[s2]]);\r\n            array[merged] = right[s2]; \r\n            ++s2;  }\r\n        ++merged;\r\n    }\r\n\r\n    while(s1 < n1)\r\n    {\r\n        animations.push([merged, left[s1]]);\r\n        array[merged] = left[s1];\r\n        ++s1;\r\n        ++merged;\r\n    }\r\n\r\n    while(s2 < n2)\r\n    {\r\n        animations.push([merged, right[s2]]);\r\n        array[merged] = right[s2];\r\n        ++s2;\r\n        ++merged;\r\n    }\r\n}\r\n\r\nexport default mergeAnimation;","export const quickSortAnimationLR = (array) => {\r\n    const animations = [];\r\n    const copy = [...array];\r\n    quickSortLR(copy, 0, array.length-1, animations); //LR\r\n    return animations;\r\n}\r\n\r\nexport const quickSortAnimationLL = (array) => {\r\n    const animations = [];\r\n    const copy = [...array];\r\n    quickSort(copy, 0, array.length-1, animations); //LL\r\n    return animations;\r\n}\r\n\r\nconst swap = (array, left, right, animations) => {\r\n    const temp = array[left];\r\n    animations.push([left, array[right]]);\r\n    array[left] = array[right];\r\n    animations.push([right, temp]);\r\n    array[right] = temp;\r\n}\r\n\r\nconst quickSortLR = (array, leftIndex, rightIndex, animations) => {\r\n    let pivot = partitionLR(array, leftIndex, rightIndex, animations);\r\n    let pivVal = array[pivot].height;\r\n    let low = leftIndex;\r\n    let high = rightIndex;\r\n\r\n    while(low <= high)\r\n    {\r\n        while(array[low].height < pivVal)\r\n        {\r\n            low++;\r\n        }\r\n\r\n        while(array[high].height > pivVal)\r\n        {\r\n            high--;\r\n        }\r\n\r\n        if(low <= high)\r\n        {\r\n            swap(array, low, high, animations);\r\n            if(pivot === low) { pivot = high; }\r\n            else if(pivot === high) { pivot = low; }\r\n\r\n            low++;\r\n            high--;\r\n        }\r\n    }\r\n\r\n    if(leftIndex < high) { quickSortLR(array, leftIndex, high, animations); }\r\n    if(low < rightIndex) { quickSortLR(array, low, rightIndex, animations); }\r\n}\r\n\r\nconst partitionLR = (array, leftIndex, rightIndex, animations) => {\r\n    let pivot = Math.floor((leftIndex+rightIndex)/2);\r\n    let l = leftIndex;\r\n    let r = rightIndex;\r\n    while(l <= r)\r\n    {\r\n        while(array[l].height < array[pivot].height)\r\n        {\r\n            l++;\r\n        }\r\n        while(array[r].height > array[pivot].height)\r\n        {\r\n            r--;\r\n        }\r\n\r\n        if(l <= r)\r\n        {\r\n            swap(array, l, r, animations);\r\n            l++;\r\n            r--;\r\n        }\r\n    }\r\n    return l;\r\n}\r\n\r\nconst partition = (array, leftIndex, rightIndex, animations) => {\r\n    const pivVal = array[rightIndex].height;\r\n    let pivInd = leftIndex;\r\n    for(let i = leftIndex; i < rightIndex; i++)\r\n    {\r\n        if(array[i].height < pivVal)\r\n        {\r\n            swap(array, i, pivInd, animations);\r\n            pivInd++;\r\n        }\r\n    }\r\n\r\n    swap(array, pivInd, rightIndex, animations);\r\n    return pivInd;\r\n}\r\n\r\nconst quickSort = (array, leftIndex, rightIndex, animations) => {\r\n\r\n    if(leftIndex >= rightIndex) { return; }\r\n    let pivot = partition(array, leftIndex, rightIndex, animations);\r\n    quickSort(array, leftIndex, pivot-1, animations);\r\n    quickSort(array, pivot+1, rightIndex, animations);\r\n}","import React from 'react';\r\nimport './toolbar.scss';\r\nimport VisualiserGround from './valuevisualiser.jsx';\r\nimport mergeAnimation from './mergesrt.jsx';\r\nimport {quickSortAnimationLR, quickSortAnimationLL} from './quicksort.jsx';\r\n\r\nconst wait = ms => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\nclass Toolbar extends React.Component {\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = { counter: 0, sorting: false, sorted: false };\r\n        this.visgrnd = React.createRef();\r\n        this.createBtn = this.createBtn.bind(this);\r\n        this.mergeSort = this.mergeSort.bind(this);\r\n        this.quickSortLR = this.quickSortLR.bind(this);\r\n        this.quickSortLL = this.quickSortLL.bind(this);\r\n        this.animateArray = this.animateArray.bind(this);\r\n        this.validate = this.validate.bind(this);\r\n    }\r\n\r\n    quickSortLR()\r\n    {\r\n        if(this.state.sorting || this.state.sorted) { return; }\r\n        let animations = quickSortAnimationLR(this.visgrnd.current.state.bars);\r\n        this.animateArray(animations);\r\n    }\r\n\r\n    quickSortLL()\r\n    {\r\n        if(this.state.sorting || this.state.sorted) { return; }\r\n        let animations = quickSortAnimationLL(this.visgrnd.current.state.bars);\r\n        this.animateArray(animations);\r\n    }\r\n\r\n    validate(array, delay)\r\n    {\r\n        array.forEach((obj, index) => {\r\n            setTimeout(() => {\r\n                obj.backgroundColour = \"green\";\r\n            }, delay * index);\r\n            this.setState({\r\n                bars: array\r\n            }); \r\n        });\r\n    }\r\n\r\n    async animateArray(animations)\r\n    {\r\n        this.setState({\r\n            sorting: true\r\n        });\r\n        let aux = this.visgrnd.current.state.bars;\r\n\r\n        const sortspeed = ((10000/50)/(aux.length/10))*2.5;\r\n        const colourspeed = 50;\r\n\r\n        for(let i = 0; i < animations.length; i++)\r\n        {\r\n            if(animations[i][0] !== animations[i][1])\r\n            {\r\n                setTimeout(() => {\r\n                    aux[animations[i][0]].backgroundColour = \"blue\";\r\n                }, colourspeed);\r\n\r\n                setTimeout(() => {\r\n                    aux[animations[i][0]].backgroundColour = \"red\";\r\n                }, colourspeed * 2);\r\n                aux[animations[i][0]] = animations[i][1];\r\n            }\r\n\r\n            this.setState({\r\n                bars: aux\r\n            });\r\n            await wait(sortspeed);\r\n        }\r\n\r\n        // animations.forEach(([swap1, swap2], index) => {\r\n        //     setTimeout(() => {\r\n        //         if(swap1 !== swap2) { \r\n        //             //aux[swap1].backgroundColour = \"blue\";\r\n        //             setTimeout(() => {\r\n        //                 aux[swap1].backgroundColour = \"blue\";\r\n        //             }, speed);\r\n                    \r\n        //             setTimeout(() => {\r\n        //                 aux[swap1].backgroundColour = \"red\";\r\n        //             }, speed*2.5);\r\n\r\n        //             aux[swap1] = swap2;\r\n        //         }\r\n        //         // setTimeout(() => {\r\n        //         //     aux[swap1].backgroundColour = \"red\";\r\n        //         // }, speed*2.5);\r\n        //         this.setState({\r\n        //             bars: aux\r\n        //         }); \r\n        //     }, index * speed);\r\n        // });\r\n        // if(Math.pow(aux.length, 2) < 40000) { await wait(40000 - (speed * aux.length)); }\r\n        // else { await wait(40000 + (speed * aux.length) - (aux.length * aux.length/100)); }\r\n\r\n        this.setState({\r\n            bars: aux\r\n        });\r\n\r\n        for(let i = 0; i < aux.length; i++)\r\n        {\r\n            setTimeout(() => {\r\n                aux[i].backgroundColour = \"green\";\r\n                this.setState({\r\n                    bars: aux\r\n                });\r\n            }, sortspeed * 2);\r\n        }\r\n\r\n        this.setState({\r\n            sorting: false,\r\n            sorted: true\r\n        });\r\n    }\r\n\r\n\r\n    mergeSort()\r\n    {\r\n        if(this.state.sorting || this.state.sorted) { return; }\r\n        let animations = mergeAnimation(this.visgrnd.current.state.bars);\r\n        this.animateArray(animations);\r\n    }\r\n\r\n    createBtn()\r\n    {\r\n        if(this.state.sorting) { return; }\r\n        this.visgrnd.current.createBars(100);\r\n        this.setState({\r\n            sorted: false\r\n        });\r\n    }\r\n    \r\n    render()\r\n    {\r\n\r\n        // <div id=\"arraySize\">Array Size:</div>\r\n        //             <input id=\"valRange\" type=\"range\"/>\r\n        return (\r\n            <>\r\n                <div class=\"toolbar\">\r\n                    <div id=\"createValues\" onClick={this.createBtn}>Create Values</div>\r\n                    <div id=\"mergeSort\" onClick={this.mergeSort}>Merge Sort</div>\r\n                    <div id=\"quickSortLR\" onClick={this.quickSortLR}>Quick Sort (LR)</div>\r\n                    <div id=\"quickSortLL\" onClick={this.quickSortLL}>Quick Sort (LL)</div>\r\n                </div>\r\n                <VisualiserGround ref={this.visgrnd} />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Toolbar;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport Toolbar from './Toolbar.jsx';\n\n\n//<Toolbar />\n//<App />\n//<VisualiserGround />\nReactDOM.render(\n  <React.StrictMode>\n    <Toolbar />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}