{"version":3,"sources":["reportWebVitals.js","valuevisualiser.jsx","mergesrt.jsx","Toolbar.jsx","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","VisualiserGround","props","state","bars","createBars","bind","Promise","maxNum","randomBars","maxRandHeight","i","length","randInt","Math","floor","random","push","class","id","height","backgroundColour","this","setState","map","bar","style","backgroundColor","React","Component","mergesort","array","leftIndex","rightIndex","animations","middle","merge","n1","n2","left","Array","right","s1","s2","merged","mergeAnimation","copy","wait","ms","resolve","setTimeout","Toolbar","counter","sorting","sorted","visgrnd","createRef","createBtn","mergeSort","animateArray","validate","delay","forEach","obj","index","a","aux","current","sortspeed","colourspeed","onClick","ref","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5a671000.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\n\r\nclass VisualiserGround extends React.Component {\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = { bars: [] };\r\n        this.createBars = this.createBars.bind(this);\r\n    }\r\n\r\n    componentDidMount()\r\n    {\r\n        new Promise(() => this.createBars(100));\r\n    }\r\n\r\n    createBars(maxNum)\r\n    {\r\n        let randomBars = [];\r\n        let maxRandHeight = 0;\r\n        if(maxNum <= 100) { maxRandHeight = maxNum; } else { maxRandHeight = 100; }\r\n        for(let i = 0; randomBars.length < maxNum; ++i)\r\n        {\r\n            let randInt = Math.floor(Math.random() * maxRandHeight+1);\r\n            randomBars.push({class: \"bar\", id: i, height: randInt*0.7, backgroundColour:\"red\"}); //randInt*8.8\r\n        }\r\n\r\n        this.setState({ bars: randomBars });\r\n    }\r\n\r\n    render()\r\n    {\r\n        return (\r\n            <div class=\"visual\">\r\n                {this.state.bars.map(bar => <div id={bar.id} class={bar.class} style={{height: bar.height+\"vh\", backgroundColor: bar.backgroundColour}}></div>)}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default VisualiserGround;","const mergeAnimation = (array) => {\r\n    const animations = [];\r\n    const copy = [...array];\r\n    mergesort(copy, 0, copy.length-1, animations);\r\n    return animations;\r\n}\r\n\r\nconst mergesort = (array, leftIndex, rightIndex, animations) =>\r\n{\r\n    if(rightIndex > leftIndex)\r\n    {\r\n        let middle = leftIndex + Math.floor((rightIndex - leftIndex)/2);\r\n        mergesort(array, leftIndex, middle, animations);\r\n        mergesort(array, middle+1, rightIndex, animations);\r\n        merge(array, leftIndex, middle, rightIndex, animations);\r\n    }\r\n}\r\n\r\nconst merge = (array, leftIndex, middle, rightIndex, animations) =>\r\n{\r\n    let n1 = middle - leftIndex + 1;\r\n    let n2 = rightIndex - middle;\r\n\r\n    //subarrays\r\n    let left = new Array(n1);\r\n    let right = new Array(n2);\r\n\r\n    for(let i = 0; i < n1; ++i) { left[i] = array[leftIndex + i]; }\r\n    for(let i = 0; i < n2; ++i) { right[i] = array[middle + 1 + i]; }\r\n\r\n    //initial index of first, second and merged subarrays\r\n    let s1 = 0; let s2 = 0; let merged = leftIndex;\r\n    \r\n\r\n    while(s1 < n1 && s2 < n2)\r\n    {\r\n        if(left[s1].height <= right[s2].height) { \r\n            animations.push([merged, left[s1]]);\r\n            array[merged] = left[s1];  \r\n            ++s1;  }\r\n        else { \r\n            animations.push([merged, right[s2]]);\r\n            array[merged] = right[s2]; \r\n            ++s2;  }\r\n        ++merged;\r\n    }\r\n\r\n    while(s1 < n1)\r\n    {\r\n        animations.push([merged, left[s1]]);\r\n        array[merged] = left[s1];\r\n        ++s1;\r\n        ++merged;\r\n    }\r\n\r\n    while(s2 < n2)\r\n    {\r\n        animations.push([merged, right[s2]]);\r\n        array[merged] = right[s2];\r\n        ++s2;\r\n        ++merged;\r\n    }\r\n}\r\n\r\nexport default mergeAnimation;","import React from 'react';\r\nimport './toolbar.scss';\r\nimport VisualiserGround from './valuevisualiser.jsx';\r\nimport mergeAnimation from './mergesrt.jsx';\r\n\r\nconst wait = ms => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\nclass Toolbar extends React.Component {\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = { counter: 0, sorting: false, sorted: false };\r\n        this.visgrnd = React.createRef();\r\n        this.createBtn = this.createBtn.bind(this);\r\n        this.mergeSort = this.mergeSort.bind(this);\r\n        this.animateArray = this.animateArray.bind(this);\r\n        this.validate = this.validate.bind(this);\r\n    }\r\n\r\n    validate(array, delay)\r\n    {\r\n        array.forEach((obj, index) => {\r\n            setTimeout(() => {\r\n                obj.backgroundColour = \"green\";\r\n            }, delay * index);\r\n            this.setState({\r\n                bars: array\r\n            }); \r\n        });\r\n    }\r\n\r\n    async animateArray(animations)\r\n    {\r\n        this.setState({\r\n            sorting: true\r\n        });\r\n        let aux = this.visgrnd.current.state.bars;\r\n\r\n        const sortspeed = ((10000/50)/(aux.length/10))*2.5;\r\n        const colourspeed = 50;\r\n\r\n        for(let i = 0; i < animations.length; i++)\r\n        {\r\n            if(animations[i][0] !== animations[i][1])\r\n            {\r\n                setTimeout(() => {\r\n                    aux[animations[i][0]].backgroundColour = \"blue\";\r\n                }, colourspeed);\r\n\r\n                setTimeout(() => {\r\n                    aux[animations[i][0]].backgroundColour = \"red\";\r\n                }, colourspeed * 2);\r\n                aux[animations[i][0]] = animations[i][1];\r\n            }\r\n\r\n            this.setState({\r\n                bars: aux\r\n            });\r\n            await wait(sortspeed);\r\n        }\r\n\r\n        // animations.forEach(([swap1, swap2], index) => {\r\n        //     setTimeout(() => {\r\n        //         if(swap1 !== swap2) { \r\n        //             //aux[swap1].backgroundColour = \"blue\";\r\n        //             setTimeout(() => {\r\n        //                 aux[swap1].backgroundColour = \"blue\";\r\n        //             }, speed);\r\n                    \r\n        //             setTimeout(() => {\r\n        //                 aux[swap1].backgroundColour = \"red\";\r\n        //             }, speed*2.5);\r\n\r\n        //             aux[swap1] = swap2;\r\n        //         }\r\n        //         // setTimeout(() => {\r\n        //         //     aux[swap1].backgroundColour = \"red\";\r\n        //         // }, speed*2.5);\r\n        //         this.setState({\r\n        //             bars: aux\r\n        //         }); \r\n        //     }, index * speed);\r\n        // });\r\n        // if(Math.pow(aux.length, 2) < 40000) { await wait(40000 - (speed * aux.length)); }\r\n        // else { await wait(40000 + (speed * aux.length) - (aux.length * aux.length/100)); }\r\n\r\n        this.setState({\r\n            bars: aux\r\n        });\r\n\r\n        for(let i = 0; i < aux.length; i++)\r\n        {\r\n            setTimeout(() => {\r\n                aux[i].backgroundColour = \"green\";\r\n                this.setState({\r\n                    bars: aux\r\n                });\r\n            }, sortspeed * 2);\r\n        }\r\n\r\n        this.setState({\r\n            sorting: false,\r\n            sorted: true\r\n        });\r\n    }\r\n\r\n\r\n    mergeSort()\r\n    {\r\n        if(this.state.sorting || this.state.sorted) { return; }\r\n        let animations = mergeAnimation(this.visgrnd.current.state.bars);\r\n        this.animateArray(animations);\r\n    }\r\n\r\n    createBtn()\r\n    {\r\n        if(this.state.sorting) { return; }\r\n        this.visgrnd.current.createBars(100);\r\n        this.setState({\r\n            sorted: false\r\n        });\r\n    }\r\n    \r\n    render()\r\n    {\r\n\r\n        // <div id=\"arraySize\">Array Size:</div>\r\n        //             <input id=\"valRange\" type=\"range\"/>\r\n        return (\r\n            <>\r\n                <div class=\"toolbar\">\r\n                    <div id=\"createValues\" onClick={this.createBtn}>Create Values</div>\r\n                    <div id=\"mergeSort\" onClick={this.mergeSort}>Merge Sort</div>\r\n                </div>\r\n                <VisualiserGround ref={this.visgrnd} />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Toolbar;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport Toolbar from './Toolbar.jsx';\n\n\n//<Toolbar />\n//<App />\n//<VisualiserGround />\nReactDOM.render(\n  <React.StrictMode>\n    <Toolbar />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}